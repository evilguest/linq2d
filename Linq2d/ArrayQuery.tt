<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ include file="CommonT4.tt" #>
<#int maxArg = 16;#>
<#int maxRes = 4;#>
using System;
using System.Linq.Expressions;

namespace Linq2d
{
    internal class ArrayQuery<T, R>: ArrayQuery<R>, IArrayQuery<T, R>
    {
        public ArraySource<T> Source { get; }

        private Func<T[,], R[,]> _transform;

        public ArrayQuery(ArraySource<T> source, Expression<Func<Cell<T>, R>> kernel) : base(source, kernel)
        {
            MethodName = new System.Diagnostics.StackTrace().GetFrame(2).GetMethod().Name;
            Source = source;
        }

        public ArrayQuery(IArraySource<T> source, LambdaExpression kernel): base(source, kernel)
        {
            MethodName = new System.Diagnostics.StackTrace().GetFrame(2).GetMethod().Name;
            Source = source.Source;
        }

        public ArrayQuery(ArraySource<T> source, object resultInit, LambdaExpression kernel): base(source, kernel, resultInit)
        {
            MethodName = new System.Diagnostics.StackTrace().GetFrame(3).GetMethod().Name;
            Source = source;
        }

        public Func<T[,], R[,]> Transform
        {
            get
            {
                if (_transform == null)
                    _transform = BuildTransform<Func<T[,], R[,]>>();
                return _transform;
            }
        }

        protected override R[,] GetResult() => Transform(Source.Array);
    }

    public interface IArrayQueryRecurrentHalf { }
    public interface IArrayQueryRecurrentHalf<T, R>: IArrayQueryRecurrentHalf, IArraySource<T> {}

    public interface IArrayQueryRecurrent<T, R, A>: IArrayQueryRecurrentHalf<T, R> {}

    internal class ArrayQueryRecurrent<T, R, A>: ArrayQuery<T, A>, IArrayQueryRecurrent<T, R, A>
    {
        public ArrayQueryRecurrent(ArraySource<T> source, Result<R> result, Expression<Func<Cell<T>, RelativeCell<R>, A>> kernel): base(source, result.InitValue, kernel){}
    }
    
    #region one result
    internal class ArrayQuery<T1, T2, R> : ArrayQuery<R>, IArrayQuery<T1, T2, R>
    {
        public ArrayQuery(ArraySource<T1> source1, ArraySource<T2> source2, Expression<Func<Cell<T1>, Cell<T2>, R>> kernel) : base(source1, source2, kernel)
        {
            MethodName = new System.Diagnostics.StackTrace().GetFrame(2).GetMethod().Name;
            Source1 = source1 ?? throw new ArgumentNullException(nameof(source1));
            Source2 = source2 ?? throw new ArgumentNullException(nameof(source2));
        }
        public ArrayQuery(IArraySource<T1, T2> sources, Result<R> result, LambdaExpression kernel) : base(sources, kernel, result.InitValue)
        {
            MethodName = new System.Diagnostics.StackTrace().GetFrame(2).GetMethod().Name;
            Source1 = sources.Source1;
            Source2 = sources.Source2;
        }

        public ArrayQuery(IArraySource<T1, T2> sources, LambdaExpression kernel) : base(sources, kernel)
        {
            MethodName = new System.Diagnostics.StackTrace().GetFrame(2).GetMethod().Name;
            Source1 = sources.Source1;
            Source2 = sources.Source2;
        }

        public ArraySource<T1> Source1 { get; }
        public ArraySource<T2> Source2 { get; }
        private Func<T1[,], T2[,], R[,]> _transform;
        public Func<T1[,], T2[,], R[,]> Transform
        {
            get
            {
                if (_transform == null)
                    _transform = BuildTransform<Func<T1[,], T2[,], R[,]>>();
                return _transform;
            }
        }

        protected override R[,] GetResult() => Transform(Source1.Array, Source2.Array);

    }
    
<#
for(int n=3; n<=maxArg; n++)
{
#>

    internal class <#= TypeName("ArrayQuery", n, 1)#> : ArrayQuery<R>, <#= TypeName("IArrayQuery", n, 1)#>
    {
<#
for(int i=0; i<n; i++)
{
#>
        public ArraySource<T<#= i+1 #>> Source<#= i+1 #>{ get; }
<#
}
#>

        private <#= FuncArraySignature(n, 1)#> _transform;

        public ArrayQuery(<#= TypeName("IArraySource", n-1,0)#> sources, ArraySource<T<#= n#>> source<#= n#>, LambdaExpression kernel) : base(sources, source<#= n#>, kernel)
        {
            MethodName = new System.Diagnostics.StackTrace().GetFrame(2).GetMethod().Name;
<#
for(int i=1; i<n; i++)
{
#>
            Source<#= i #> = sources.Source<#= i #>;
<#
}
#>
            Source<#= n#> = source<#= n#> ?? throw new ArgumentNullException(nameof(source<#= n#>));
        }

        public ArrayQuery(<#= TypeName("IArraySource", n,0)#> sources, Result<R> result, LambdaExpression kernel) : base(sources, kernel, result.InitValue)
        {
            MethodName = new System.Diagnostics.StackTrace().GetFrame(2).GetMethod().Name;
<#
for(int i=1; i<=n; i++)
{
#>
            Source<#= i #> = sources.Source<#= i #>;
<#
}
#>
        }

        public ArrayQuery(<#= TypeName("IArraySource", n,0)#> sources, LambdaExpression kernel) : base(sources, kernel)
        {
            MethodName = new System.Diagnostics.StackTrace().GetFrame(2).GetMethod().Name;
<#
for(int i=1; i<=n; i++)
{
#>
            Source<#= i #> = sources.Source<#= i #>;
<#
}
#>
        }

        public Func<<#for(int i=0; i<n; i++){ #>T<#= i+1 #>[,], <# } #>R[,]> Transform
        {
            get
            {
                if (_transform == null)
                    _transform = BuildTransform<Func<<#for(int i=0; i<n; i++){ #>T<#= i+1 #>[,], <# } #>R[,]>>();
                return _transform;
            }
        }

        protected override R[,] GetResult() => Transform(Source1.Array<#for(int i=2; i<=n; i++){#>, Source<#= i #>.Array<#}#>);
    }
<#
}
#>
    #endregion

<#
for(int k=2; k <= maxRes; k++)
{
#>
    #region <#= k#> results
    internal class <#= TypeName("ArrayQuery", 1, k)#>: <#= TypeName("ArrayQuery", 0, k)#>, <#= TypeName("IArrayQuery", 1, k)#>
    {
        public ArraySource<T> Source { get; }

        private <#= FuncArraySignature(1, k)#> _transform;


        public ArrayQuery<#= k#>(ArraySource<T> source, Expression<Func<Cell<T>, <#= ReturnTuple(k)#>>> kernel) : base(source, kernel)
        {
            MethodName = new System.Diagnostics.StackTrace().GetFrame(2).GetMethod().Name;
            Source = source;
        }
        public ArrayQuery<#= k#>(ArraySource<T> source, Result<R1> result, Expression<Func<Cell<T>, RelativeCell<R1>, <#= ReturnTuple(k)#>>> kernel):base(source, kernel, result.InitValue)
        {
            MethodName = new System.Diagnostics.StackTrace().GetFrame(2).GetMethod().Name;
            Source = source;
        }

        public ArrayQuery<#= k#>(IArraySource<T> source, LambdaExpression kernel): base(source, kernel)
        {
            MethodName = new System.Diagnostics.StackTrace().GetFrame(2).GetMethod().Name;
            Source = source.Source;
        }

        public ArrayQuery<#= k#>(IArrayQueryRecurrentHalf<T, R1> source, Result<R2> result, LambdaExpression kernel): base(source, kernel, result.InitValue)
        {
            MethodName = new System.Diagnostics.StackTrace().GetFrame(2).GetMethod().Name;
            Source = source.Source;
        }


        public <#= FuncArraySignature(1, k)#> Transform
        {
            get
            {
                if (_transform == null)
                    _transform = BuildTransform<<#= FuncArraySignature(1, k)#>>();
                return _transform;
            }
        }

        protected override <#= ReturnTuple(k, "[,]")#> GetResult() => Transform(Source.Array);

    }

    internal class <#= TypeName("ArrayQuery", 2, k)#> : <#= TypeName("ArrayQuery", 0, k)#>, <#= TypeName("IArrayQuery", 2, k)#>
    {
        public ArrayQuery<#= k#>(ArraySource<T1> source1, ArraySource<T2> source2, Expression<Func<Cell<T1>, Cell<T2>, <#= ReturnTuple(k)#>>> kernel) : base(source1, source2, kernel)
        {
            MethodName = new System.Diagnostics.StackTrace().GetFrame(2).GetMethod().Name;
            Source1 = source1 ?? throw new ArgumentNullException(nameof(source1));
            Source2 = source2 ?? throw new ArgumentNullException(nameof(source2));
        }
        public ArrayQuery<#= k#>(IArraySource<T1, T2> sources, LambdaExpression kernel) : base(sources, kernel)
        {
            MethodName = new System.Diagnostics.StackTrace().GetFrame(2).GetMethod().Name;
            Source1 = sources.Source1;
            Source2 = sources.Source2;
        }
        public ArrayQuery<#= k#>(IArraySource<T1, T2> sources, Result<R1> result, LambdaExpression kernel) : base(sources, kernel, result.InitValue)
        {
            MethodName = new System.Diagnostics.StackTrace().GetFrame(2).GetMethod().Name;
            Source1 = sources.Source1;
            Source2 = sources.Source2;
        }
        public ArraySource<T1> Source1 { get; }
        public ArraySource<T2> Source2 { get; }
        private <#= FuncArraySignature(2, k)#> _transform;
        public <#= FuncArraySignature(2, k)#> Transform
        {
            get
            {
                if (_transform == null)
                    _transform = BuildTransform<<#= FuncArraySignature(2, k)#>>();
                return _transform;
            }
        }

        protected override <#= ReturnTuple(k, "[,]")#> GetResult() => Transform(Source1.Array, Source2.Array);

    }

<#
for(int n=3; n<=maxArg; n++)
{
#>
    internal class <#= TypeName("ArrayQuery", n, k)#> : <#= TypeName("ArrayQuery", 0, k)#>, <#= TypeName("IArrayQuery", n, k)#>
    {
<#
for(int i=0; i<n; i++)
{
#>
        public ArraySource<T<#= i+1 #>> Source<#= i+1 #>{ get; }
<#
}
#>
        public ArrayQuery<#= k#>(<#= TypeName("IArraySource", n-1,0)#> sources, ArraySource<T<#= n#>> source<#= n#>, LambdaExpression kernel) : base(sources, source<#= n#>, kernel)
        {
            MethodName = new System.Diagnostics.StackTrace().GetFrame(2).GetMethod().Name;
<#
for(int i=1; i<n; i++)
{
#>
            Source<#= i #> = sources.Source<#= i #>;
<#
}
#>
            Source<#= n#> = source<#= n#>;
        }
        public ArrayQuery<#= k#>(<#= TypeName("IArraySource", n-1,0)#> sources, LambdaExpression kernel) : base(sources, kernel)
        {
            MethodName = new System.Diagnostics.StackTrace().GetFrame(2).GetMethod().Name;
<#
for(int i=1; i<n; i++)
{
#>
            Source<#= i #> = sources.Source<#= i #>;
<#
}
#>
        }
        public ArrayQuery<#= k#>(<#= TypeName("IArraySource", n-1,0)#> sources, Result<R1> result, LambdaExpression kernel) : base(sources, kernel, result.InitValue)
        {
            MethodName = new System.Diagnostics.StackTrace().GetFrame(2).GetMethod().Name;
<#
for(int i=1; i<n; i++)
{
#>
            Source<#= i #> = sources.Source<#= i #>;
<#
}
#>
        }
        private <#= FuncArraySignature(n, k)#> _transform;
        public <#= FuncArraySignature(n, k)#> Transform
        {
            get
            {
                if (_transform == null)
                    _transform = BuildTransform<<#= FuncArraySignature(n, k)#>>();
                return _transform;
            }
        }

        protected override <#= ReturnTuple(k, "[,]")#> GetResult() => Transform(Source1.Array<#for(int i=2; i<=n; i++){#>, Source<#= i #>.Array<#}#>);

    }
<#
} // n - inputs
#>
    #endregion
<#
} // k - results
#>
}
