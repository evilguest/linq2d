<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ include file="..\CommonT4.tt" #>
using System;
using System.Linq.Expressions;
using Linq2d.Expressions;

namespace Linq2d
{
<#
for(int k=1; k <= maxRes; k++)
{
#>
    #region <#= k#> <#= Plural("result", k)#>

    internal abstract partial class <#= TypeName("ArrayQuery", 0, k)#> : ArrayQueryBase
    {
        protected ArrayQuery<#=k>1?k:""#>(ArraySource source, LambdaExpression kernel) : base(source, kernel) { }
        protected ArrayQuery<#=k>1?k:""#>(IArrayQuery sources, LambdaExpression kernel) : base(sources, kernel) { }
        protected ArrayQuery<#=k>1?k:""#>(ArraySource left, ArraySource right, LambdaExpression kernel) : base(left, right, kernel) { }
        protected ArrayQuery<#=k>1?k:""#>(IArrayQuery sources, ArraySource right, LambdaExpression kernel) : base(sources, right, kernel) { }

        protected ArrayQuery<#=k>1?k:""#>(ArraySource source, LambdaExpression kernel, R<#= k>1?1:""#> initValue<#= k>1?1:""#>) : base(source, kernel, initValue<#= k>1?1:""#>) { }
<#
    for(int l=1; l<=k; l++)
    {
#>
        protected ArrayQuery<#=k>1?k:""#>(IArrayQuery sources, LambdaExpression kernel, R<#= k>1?l:""#> initValue<#= k>1?l:""#>) : base(sources, kernel, initValue<#= k>1?l:""#>) { }
<#
    }
#>
        protected <#= ReturnTuple(k, "[,]")#><#=k>1?"?":""#> _result;
        protected abstract <#= ReturnTuple(k, "[,]")#> GetResult();
        public <#= ReturnTuple(k, "[,]")#> <#=Plural("ToArray",k)#>()
        {
            if (_result == null)
                _result = GetResult();
            return _result<#= k>1?".Value":""#>;
        }
    }

<#
for(int n=1; n<=maxArg; n++)
{
#>

    internal class <#= TypeName("ArrayQuery", n, k)#> : <#= TypeName("ArrayQuery", 0, k)#>, <#= TypeName("IArrayQuery", n, k)#>
    {
<#
for(int i=1; i<=n; i++)
{
#>
        public ArraySource<T<#=n>1? i:""#>> Source<#=n>1? i:""#>{ get; }
<#
}
#>
<#
    if(n==1)
    {
#>
        public ArrayQuery<#= k>1?k:""#>(ArraySource<T> source, LambdaExpression kernel) : base(source, kernel)
        {
            MethodName = new System.Diagnostics.StackTrace().GetFrame(2).GetMethod().Name;
            Source = source;
        }
<#
//    for(int r=1; r<=k; r++)
//    {
#>
        public ArrayQuery<#= k>1?k:""#>(ArraySource<T> source, R<#=k>1?1:""#> initValue, LambdaExpression kernel) : base(source, kernel, initValue)
        {
            MethodName = new System.Diagnostics.StackTrace().GetFrame(2).GetMethod().Name;
            Source = source;
        }
<#
//    } // r
#>

<#
    } //n
#>

<#
    if(n==2)
    {
#>
        public ArrayQuery<#= k>1?k:""#>(ArraySource<T1> source1, ArraySource<T2> source2, LambdaExpression kernel) : base(source1, source2, kernel)
        {
            MethodName = new System.Diagnostics.StackTrace().GetFrame(2).GetMethod().Name;
            Source1 = source1;
            Source2 = source2;
        }
<#
    }
#>

<#
    if(n>1)
    {
#>
        public ArrayQuery<#= k>1?k:""#>(IArraySource<#= TemplateArgsOne(n-1, 0)#> sources, ArraySource<T<#= n#>> source<#= n#>, LambdaExpression kernel) : base(sources, source<#= n#>, kernel)
        {
            MethodName = new System.Diagnostics.StackTrace().GetFrame(2).GetMethod().Name;
<#
for(int i=1; i<n; i++)
{
#>
            Source<#= i #> = sources.Source<#= n>2?i:"" #>;
<#
}
#>
            Source<#= n#> = source<#= n#>;
        }
<#
    }
#>
        public ArrayQuery<#= k>1?k:""#>(IArraySource<#= TemplateArgs(n,0)#> sources, LambdaExpression kernel) : base(sources, kernel)
        {
            MethodName = new System.Diagnostics.StackTrace().GetFrame(2).GetMethod().Name;
<#
for(int i=1; i<=n; i++)
{
#>
            Source<#= n>1? i:""#> = sources.Source<#= n>1?i:"" #>;
<#
}
#>
        }
<#
    for(int r=1; r<=k; r++)
    {
#>
        public ArrayQuery<#= k>1?k:""#>(IArraySource<#= TemplateArgs(n,0)#> sources, R<#=k>1?r:""#> initValue, LambdaExpression kernel) : base(sources, kernel, initValue)
        {
            MethodName = new System.Diagnostics.StackTrace().GetFrame(2).GetMethod().Name;
<#
for(int i=1; i<=n; i++)
{
#>
            Source<#= n>1? i:""#> = sources.Source<#= n>1?i:"" #>;
<#
}
#>
        }
<#
    } // r
#>
        private <#= FuncArraySignature(n, k)#> _transform;
        public <#= FuncArraySignature(n, k)#> Transform
        {
            get
            {
                if (_transform == null)
                    _transform = BuildTransform<<#= FuncArraySignature(n, k)#>>();
                return _transform;
            }
        }

        protected override <#= ReturnTuple(k, "[,]")#> GetResult() => Transform(Source<#= n>1?1:""#>.Array<#for(int i=2; i<=n; i++){#>, Source<#= i #>.Array<#}#>);

    }
<#
} // n - inputs
#>
    #endregion
<#
} // k - results
#>
}
