<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\CommonT4.tt" #>
using System;
using System.Linq.Expressions;

namespace Linq2d
{
    public static partial class Array2d
    {
<#
for(int n=1; n<=maxArg; n++)
{
#>
        #region <#= n#> <#= Plural("source", n) #>

        // intermediate-recurrent select of 1 result from <#= n#> <#= Plural("source", n) #>
        public static I<#= ArrayQueryRecurrentA(n, 1)#> SelectMany<#= TemplateArgsSkipBase(n, 1, "_, A")#>(this IArrayQuery<#= TemplateArgsSkip(n, 0)#> <#= Plural("source", n) #>, Func<object, Result<R>> recurrentSelector, Expression<Func<_, RelativeCell<R>, A>> resultSelector) 
            where A: class
            => new <#= ArrayQueryRecurrentA(n, 1)#>(<#= Plural("source", n) #>, recurrentSelector(default).InitValue, resultSelector);


<#
    for(int k=1; k<=maxRes; k++)
    {
#>
		// final select of <#= k#> results from <#= n#> <#= Plural("source", n) #>
        public static <#= TypeName(k==1?"IArrayQuery":"IArrayTransform", n, k)#> Select<#= TemplateArgsSkip(n, k)#>(this IArrayQuery<#= TemplateArgsSkip(n, 0)#> sources, Expression<Func<_, <#= ReturnTuple(k)#>>> resultSelector) 
            => new <#= TypeName("ArrayQuery", n, k)#>(sources, resultSelector);

        // final-recurrent select of <#= k#> results from <#= n#> <#= Plural("source", n) #>
        public static <#= TypeName(k==1?"IArrayQuery":"IArrayTransform", n, k)#> SelectMany<#= TemplateArgsSkip(n, k)#>(this IArrayQuery<#= TemplateArgsSkip(n, 0)#> sources, Func<object, Result<R<#= k>1?1:""#>>> recurrentResult1Selector, Expression<Func<_, RelativeCell<R<#= k>1?1:""#>>, <#= ReturnTuple(k)#>>> resultSelector) 
            => new <#= TypeName("ArrayQuery", n, k)#>(sources, recurrentResult1Selector(default).InitValue, resultSelector);

<#
        if (n<maxArg) 
        {        
#>

        // final select of <#= k#> results from <#= n#>+1 sources
        public static <#= TypeName("IArrayQuery", n+1, k)#> SelectMany<#= TemplateArgsSkip(n+1, k)#>(this IArrayQuery<#= TemplateArgsSkipOne(n, 0)#> <#= Plural("source", n) #>, Func<object, T<#= n+1#>[,]> source<#= n+1#>Selector, Expression<Func<_, Cell<T<#= n+1#>>, <#= ReturnTuple(k)#>>> kernel)
            => new <#= TypeName("ArrayQuery", n+1, k)#>(<#= Plural("source", n) #>, source<#= n+1#>Selector(default).Wrap(), kernel); 
        public static <#= TypeName("IArrayQuery", n+1, k)#> SelectMany<#= TemplateArgsSkip(n+1, k)#>(this IArrayQuery<#= TemplateArgsSkipOne(n, 0)#> <#= Plural("source", n) #>, Func<object, ArraySource<T<#= n+1#>>> source<#= n+1#>Selector, Expression<Func<_, Cell<T<#= n+1#>>, <#= ReturnTuple(k)#>>> kernel)
            => new <#= TypeName("ArrayQuery", n+1, k)#>(<#= Plural("source", n) #>, source<#= n+1#>Selector(default), kernel); 
<#
        } // n<maxArg        
#>


<#
    } // k
#>
        #endregion

<#
} // n
#>
	}

}
